searchState.loadedDescShard("libobs_wrapper", 0, "OBS Context Management\nFor this display method to work, another preview window …\nThis function can only be called OUTSIDE of the OBS thread.\nRuntime management for safe OBS API access across threads\nDownloading status (first is progress from 0.0 to 1.0 and …\nExtracting status (first is progress from 0.0 to 1.0 and …\nA trait for bootstrapping OBS Studio.\nThe application must be restarted to use the new version …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisables the automatic restart of the application after …\n<code>true</code> if the updater should check for updates and download …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe OBS context is ready to use\nInterface to the OBS context. Only one context can exist …\nThe application must be restarted to apply OBS updates\nCreates a new display and returns its ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes libobs on the current thread.\nResets the OBS video context. This is often called when …\nWe are using this as global variable because there can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains <code>obs_data</code> and its related strings. Note that this …\nImportant: Make sure to call <code>update()</code> after setting the …\nTrait for building OBS sources.\nReturns a pointer to the raw <code>obs_data</code> represented by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the ID of the source.\nReturns the ID of the object\nReturns the name of the source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty <code>ObsData</code> wrapper for the libobs <code>obs_data</code>…\nSets a bool in <code>obs_data</code> and stores the key in <code>ObsData</code> so …\nSets a double in <code>obs_data</code> and stores the key in <code>ObsData</code> so …\nSets an int in <code>obs_data</code> and stores the key in <code>ObsData</code> so …\nSets a string in <code>obs_data</code> and stores it so it in <code>ObsData</code> …\nInformation passed to libobs when attempting to reset the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImmutable wrapper around obs_data_t to be prevent …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA reference to an OBS output.\nDefines functionality specific to replay buffer outputs.\nCreates and attaches a new audio encoder to this output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a list of all video encoders attached to this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSaves the current replay buffer content to disk.\nSaves the current replay buffer content to disk.\nAttaches an existing audio encoder to this output at the …\nAttaches an existing video encoder to this output.\nStarts the output.\nStops the output.\nUpdates the settings of this output.\nCreates and attaches a new video encoder to this output.\nA boolean property\nA button property\nA color property\nA color alpha property\nAn editable list property\nA float property\nA font property\nA frame rate property\nA group property\nAn integer property\nA property that is not valid\nA list property\nThis trait is implemented for all obs objects that can …\nA path property\nA text property\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the properties of the object\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImportant Notice\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA wrapper for <code>obs_video_info</code>, which is used to pass …\nA structure intended to help make creating new <code>ObsVideoInfo</code>…\nSets the GPU adapter device that the video output is coming\nReturns an <code>ObsVideoInfo</code> pointer.\nSets the height of the screen being recorded.\nSets the width of the screen being recorded.\nConsumes the <code>ObsVideoInfoBuilder</code> to create an <code>ObsVideoInfo</code>.\nSets the video colorspace.\nDivides the FPS numerator to allow for fractional FPS …\nSets the framerate of the output video. Note that this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets whether the GPU will handle conversion in the video.\nSets the graphics backend that libobs uses to record.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ObsVideoInfo</code>.\nCreates a new <code>ObsVideoInfoBuilder</code> for creating new …\nSets the format in which the video will be output.\nSets the height of the video output.\nSets the width of the video output.\nSets the video range.\nSets the video scaling type.\nNEVER STORE THIS REF DIRECTLY!!\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is only needed once for global audio context\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is only needed once for global video context\nThe specified path was invalid\nFailed to connect to a server\nAn output is currently running, preventing resetting the …\nUnexpectedly disconnected\nEncoder error\nGeneric error\n44.1 kHz\n48.0 kHz\nGeneric error occured when attempting to reset the OBS …\nA parameter is invalid.\nInvalid stream path\nRan out of disk space\nThe adapter is not supported as it lacks capabilities.\nDescribes the colorspace that an OBS video context uses. …\nDescribes which graphics backend should be used in the OBS …\nStatus types returned after attempting to reset the OBS …\nAudio samples per second options that are supported by …\nDescribes how libobs should reconcile non-matching base …\nDescribes the video output format used by the OBS video …\nDescribes the minimum and maximum color levels that an OBS …\n<code>obs_reset_video</code> was successful.\nSuccessfully stopped\nThe settings, video/audio format, or codecs are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA logger that writes logs to a file\nWe are using this as global variable because there can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe OBS context is ready to use\nCore runtime that manages the OBS thread\nReturn type for OBS runtime initialization\nThe application must be restarted to apply OBS updates\nGuard object to ensure proper cleanup when the runtime is …\nEnsures the OBS thread is properly shut down when the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutes an operation on the OBS thread without returning …\nExecutes an operation on the OBS thread and returns a …\nExecutes an operation on the OBS thread and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnable to bootstrap OBS for downloading and installing\nNative error from the Windows API when creating a display\nThe <code>obs_startup</code> function failed on libobs.\nThe obs thread couldn’t be called\nFailed to lock mutex describing whether there is a thread …\nCouldn’t get the sender of the signal\nThe function returned a null pointer, often indicating an …\nError type for OBS function calls.\nBuilds into an <code>ObsString</code> that represents a path used by …\nString wrapper for OBS function calls.\nUnable to reset video.\nUnable to reset video because the program attempted to …\nContains information to start a libobs context. This is …\nContains the necessary paths for starting the libobs …\nSome or no thread is already using libobs. This is a bug!\nReturns a pointer to the underlying C string along with …\nConsumes the <code>ObsPath</code> to create a new immutable ObsString …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>ObsString</code> from a <code>String</code>.\nCreates an <code>ObsString</code> from a vector of bytes.\nCreates an <code>ObsString</code> from a string slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>ObsPath</code> with <code>path_str</code> appended to the path …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ObsString</code> from a string slice.\nCreates a new <code>ObsPath</code> strictly using the path <code>path_str</code> …\nModifies the path to point to its current parent. This is …\nModifies the path to point to the path <code>path_str</code> appended …\nConverts the <code>ObsString</code> back to a Rust <code>String</code>.\nUpdates the object with the current settings. For examples …")